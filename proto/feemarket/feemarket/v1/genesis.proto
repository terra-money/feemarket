syntax = "proto3";
package feemarket.feemarket.v1;

option go_package = "github.com/skip-mev/feemarket/x/feemarket/types";

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "feemarket/feemarket/v1/params.proto";

// GenesisState defines the feemarket module's genesis state.
message GenesisState {
  // Params are the parameters for the feemarket module. These parameters
  // can be utilized to implement both the base EIP-1559 fee market and
  // and the AIMD EIP-1559 fee market.
  Params params = 1 [ (gogoproto.nullable) = false ];

  // States contains the current states of the AIMD fee market for all FeeDenom.
  State states = 2 [ (gogoproto.nullable) = false ];

  // FeeDenomParams contains the current state of the fee denom.
  repeated FeeDenomParam fee_denom_params = 3 [ (gogoproto.nullable) = false ];
}

// FeeDenomParam is utilized to track the current state of the fee denom. This includes
// the current base fee, min base fee.
message FeeDenomParam {
  // FeeDenom is the denom that will be used for all fee payments.
  string fee_denom = 1;

  // MinBaseFee determines the initial base fee of the module and the global
  // minimum for the network. This is denominated in fee per gas unit.
  string min_base_fee = 2 [
    (cosmos_proto.scalar) = "cosmos.Legacy",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // BaseFee is the current base fee. This is denominated in the fee per gas
  // unit.
  string base_fee = 3 [
    (cosmos_proto.scalar) = "cosmos.Legacy",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}


// State is utilized to track the current state of the fee market. This includes
// the current learning rate, and block utilization within the
// specified AIMD window.
message State {
  // LearningRate is the current learning rate.
  string learning_rate = 1 [
    (cosmos_proto.scalar) = "cosmos.Legacy",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // Window contains a list of the last blocks' utilization values. This is used
  // to calculate the next base fee. This stores the number of units of gas
  // consumed per block.
  repeated uint64 window = 2;

  // Index is the index of the current block in the block utilization window.
  uint64 index = 3;
}