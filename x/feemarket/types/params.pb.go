// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: feemarket/feemarket/v1/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params contains the required set of parameters for the EIP1559 fee market
// plugin implementation.
type Params struct {
	// Alpha is the amount we additively increase the learning rate
	// when it is above or below the target +/- threshold.
	Alpha cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=alpha,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"alpha"`
	// Beta is the amount we multiplicatively decrease the learning rate
	// when it is within the target +/- threshold.
	Beta cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=beta,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"beta"`
	// Theta is the threshold for the learning rate. If the learning rate is
	// above or below the target +/- threshold, we additively increase the
	// learning rate by Alpha. Otherwise, we multiplicatively decrease the
	// learning rate by Beta.
	Theta cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=theta,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"theta"`
	// Delta is the amount we additively increase/decrease the base fee when the
	// net block utilization difference in the window is above/below the target
	// utilization.
	Delta cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=delta,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"delta"`
	// MinLearningRate is the lower bound for the learning rate.
	MinLearningRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=min_learning_rate,json=minLearningRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_learning_rate"`
	// MaxLearningRate is the upper bound for the learning rate.
	MaxLearningRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=max_learning_rate,json=maxLearningRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max_learning_rate"`
	// TargetBlockUtilization is the target block utilization.
	TargetBlockUtilization uint64 `protobuf:"varint,7,opt,name=target_block_utilization,json=targetBlockUtilization,proto3" json:"target_block_utilization,omitempty"`
	// MaxBlockUtilization is the maximum block utilization.
	MaxBlockUtilization uint64 `protobuf:"varint,8,opt,name=max_block_utilization,json=maxBlockUtilization,proto3" json:"max_block_utilization,omitempty"`
	// Window defines the window size for calculating an adaptive learning rate
	// over a moving window of blocks.
	Window uint64 `protobuf:"varint,9,opt,name=window,proto3" json:"window,omitempty"`
	// Enabled is a boolean that determines whether the EIP1559 fee market is
	// enabled.
	Enabled bool `protobuf:"varint,10,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// DefaultFeeDenom is the default fee denom for the EIP1559 fee market
	// used to simulate transactions if there are no fees specified
	DefaultFeeDenom string `protobuf:"bytes,11,opt,name=default_fee_denom,json=defaultFeeDenom,proto3" json:"default_fee_denom,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_3907de4df2e1c66e, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetTargetBlockUtilization() uint64 {
	if m != nil {
		return m.TargetBlockUtilization
	}
	return 0
}

func (m *Params) GetMaxBlockUtilization() uint64 {
	if m != nil {
		return m.MaxBlockUtilization
	}
	return 0
}

func (m *Params) GetWindow() uint64 {
	if m != nil {
		return m.Window
	}
	return 0
}

func (m *Params) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Params) GetDefaultFeeDenom() string {
	if m != nil {
		return m.DefaultFeeDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "feemarket.feemarket.v1.Params")
}

func init() {
	proto.RegisterFile("feemarket/feemarket/v1/params.proto", fileDescriptor_3907de4df2e1c66e)
}

var fileDescriptor_3907de4df2e1c66e = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x63, 0x48, 0xdc, 0x76, 0x39, 0x54, 0x35, 0x10, 0x2d, 0x45, 0x72, 0x23, 0xb8, 0x44,
	0x48, 0xb5, 0x15, 0xb8, 0x70, 0x8e, 0x02, 0x08, 0xa9, 0x07, 0x64, 0x89, 0x0b, 0x12, 0xb2, 0xc6,
	0xf6, 0xc4, 0x5e, 0xd9, 0xbb, 0x6b, 0xd9, 0x9b, 0xd4, 0xe5, 0x29, 0x78, 0x98, 0x3e, 0x44, 0x8f,
	0x15, 0x27, 0xc4, 0xa1, 0x42, 0xc9, 0x8b, 0xa0, 0x5d, 0x1b, 0x52, 0xda, 0x9b, 0x6f, 0x33, 0xf3,
	0xef, 0xf7, 0x79, 0x7c, 0x18, 0xf2, 0x72, 0x89, 0xc8, 0xa1, 0xca, 0x51, 0xf9, 0xbb, 0x6a, 0x3d,
	0xf3, 0x4b, 0xa8, 0x80, 0xd7, 0x5e, 0x59, 0x49, 0x25, 0x9d, 0xf1, 0xbf, 0xc8, 0xdb, 0x55, 0xeb,
	0xd9, 0xf1, 0xb3, 0x58, 0xd6, 0x5c, 0xd6, 0xa1, 0x79, 0xe5, 0xb7, 0x4d, 0x8b, 0x1c, 0x3f, 0x49,
	0x65, 0x2a, 0xdb, 0xb9, 0xae, 0xda, 0xe9, 0x8b, 0xcb, 0x11, 0xb1, 0x3f, 0x19, 0xb3, 0xf3, 0x81,
	0x8c, 0xa0, 0x28, 0x33, 0xa0, 0xd6, 0xc4, 0x9a, 0x1e, 0xcc, 0x67, 0x57, 0x37, 0x27, 0x83, 0x5f,
	0x37, 0x27, 0xcf, 0x5b, 0x4b, 0x9d, 0xe4, 0x1e, 0x93, 0x3e, 0x07, 0x95, 0x79, 0x67, 0x98, 0x42,
	0x7c, 0xb1, 0xc0, 0xf8, 0xc7, 0xe5, 0x29, 0xe9, 0x3e, 0xb2, 0xc0, 0x38, 0x68, 0x79, 0xe7, 0x1d,
	0x19, 0x46, 0xa8, 0x80, 0x3e, 0xe8, 0xeb, 0x31, 0xb8, 0xde, 0x47, 0x65, 0xda, 0xf3, 0xb0, 0xf7,
	0x3e, 0x86, 0xd7, 0xa2, 0x04, 0x0b, 0x05, 0x74, 0xd8, 0x5b, 0x64, 0x78, 0xe7, 0x2b, 0x39, 0xe2,
	0x4c, 0x84, 0x05, 0x42, 0x25, 0x98, 0x48, 0xc3, 0x0a, 0x14, 0xd2, 0x51, 0x5f, 0xe9, 0x21, 0x67,
	0xe2, 0xac, 0x53, 0x05, 0xa0, 0xd0, 0xe8, 0xa1, 0xb9, 0xa3, 0xb7, 0xfb, 0xeb, 0xa1, 0xf9, 0x4f,
	0xff, 0x96, 0x50, 0x05, 0x55, 0x8a, 0x2a, 0x8c, 0x0a, 0x19, 0xe7, 0xe1, 0x4a, 0xb1, 0x82, 0x7d,
	0x03, 0xc5, 0xa4, 0xa0, 0x7b, 0x13, 0x6b, 0x3a, 0x0c, 0xc6, 0x6d, 0x3e, 0xd7, 0xf1, 0xe7, 0x5d,
	0xea, 0xbc, 0x26, 0x4f, 0xf5, 0x62, 0xf7, 0xb1, 0x7d, 0x83, 0x3d, 0xe6, 0xd0, 0xdc, 0x63, 0xc6,
	0xc4, 0x3e, 0x67, 0x22, 0x91, 0xe7, 0xf4, 0xc0, 0x3c, 0xea, 0x3a, 0x87, 0x92, 0x3d, 0x14, 0x10,
	0x15, 0x98, 0x50, 0x32, 0xb1, 0xa6, 0xfb, 0xc1, 0xdf, 0xd6, 0x79, 0x45, 0x8e, 0x12, 0x5c, 0xc2,
	0xaa, 0x50, 0xe1, 0x12, 0x31, 0x4c, 0x50, 0x48, 0x4e, 0x1f, 0xe9, 0xdf, 0x0f, 0x0e, 0xbb, 0xe0,
	0x3d, 0xe2, 0x42, 0x8f, 0xe7, 0x1f, 0xaf, 0x36, 0xae, 0x75, 0xbd, 0x71, 0xad, 0xdf, 0x1b, 0xd7,
	0xfa, 0xbe, 0x75, 0x07, 0xd7, 0x5b, 0x77, 0xf0, 0x73, 0xeb, 0x0e, 0xbe, 0xf8, 0x29, 0x53, 0xd9,
	0x2a, 0xf2, 0x62, 0xc9, 0xfd, 0x3a, 0x67, 0xe5, 0x29, 0xc7, 0xf5, 0xad, 0x43, 0x6a, 0x6e, 0xd5,
	0xea, 0xa2, 0xc4, 0x3a, 0xb2, 0xcd, 0x21, 0xbc, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x74,
	0x9f, 0x7b, 0x78, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefaultFeeDenom) > 0 {
		i -= len(m.DefaultFeeDenom)
		copy(dAtA[i:], m.DefaultFeeDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.DefaultFeeDenom)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Window != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Window))
		i--
		dAtA[i] = 0x48
	}
	if m.MaxBlockUtilization != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxBlockUtilization))
		i--
		dAtA[i] = 0x40
	}
	if m.TargetBlockUtilization != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TargetBlockUtilization))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.MaxLearningRate.Size()
		i -= size
		if _, err := m.MaxLearningRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MinLearningRate.Size()
		i -= size
		if _, err := m.MinLearningRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Delta.Size()
		i -= size
		if _, err := m.Delta.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Theta.Size()
		i -= size
		if _, err := m.Theta.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Beta.Size()
		i -= size
		if _, err := m.Beta.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Alpha.Size()
		i -= size
		if _, err := m.Alpha.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Alpha.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Beta.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Theta.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Delta.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinLearningRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MaxLearningRate.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.TargetBlockUtilization != 0 {
		n += 1 + sovParams(uint64(m.TargetBlockUtilization))
	}
	if m.MaxBlockUtilization != 0 {
		n += 1 + sovParams(uint64(m.MaxBlockUtilization))
	}
	if m.Window != 0 {
		n += 1 + sovParams(uint64(m.Window))
	}
	if m.Enabled {
		n += 2
	}
	l = len(m.DefaultFeeDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alpha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Alpha.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Beta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Theta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Theta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLearningRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinLearningRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLearningRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxLearningRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetBlockUtilization", wireType)
			}
			m.TargetBlockUtilization = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetBlockUtilization |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBlockUtilization", wireType)
			}
			m.MaxBlockUtilization = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBlockUtilization |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Window", wireType)
			}
			m.Window = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Window |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFeeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultFeeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
